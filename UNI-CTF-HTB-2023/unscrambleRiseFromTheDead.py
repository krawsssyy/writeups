pos = [0x33,0x77,0x5D,0x47,0x5B,0x92,0x93,0x0F,0x29,0x72,0x6C,0x86,0x39,0x20,0x12,0x0B,0x16,0x4B,0x17,0x96,0x48,0x57,0x91,0x0E,0x4D,0x81,0x1E,0x4C,0x52,0x21,0x4A,0xA8,0x76,0x59,0x14,0x2B,0x08,0x1D,0xA5,0x36,0x35,0xA2,0x02,0x73,0x2D,0x5E,0x6D,0xA3,0x89,0x05,0x37,0x8F,0x7C,0x68,0x99,0x7D,0x11,0x6F,0x2C,0x90,0x7E,0x85,0x4E,0x51,0x01,0x75,0x15,0x50,0x7A,0x78,0x3D,0x0C,0x9C,0x65,0x49,0x7F,0x6A,0x0D,0x64,0x31,0x0A,0x56,0x67,0x32,0x19,0x9D,0x3A,0x66,0x70,0x06,0x03,0x79,0x41,0x18,0x2E,0x3E,0x9B,0x62,0x4F,0x83,0x7B,0x1C,0xA9,0x1F,0x84,0x82,0x23,0x24,0x10,0x54,0xAD,0x3F,0xA4,0x63,0x44,0x8C,0x61,0x40,0x45,0xAE,0x42,0x80,0x69,0x9A,0x30,0x8E,0xAC,0x8B,0x3B,0x27,0x46,0x58,0x07,0x09,0x9F,0x6E,0x55,0x38,0x71,0xAB,0x87,0x95,0x1A,0x8D,0x34,0xA6,0x98,0x6B,0x97,0xA1,0x74,0x8A,0x5F,0x25,0x5A,0x2A,0x00,0x2F,0x60,0x5C,0x88,0xA0,0x9E,0x43,0x04,0x22,0xA7,0x13,0x28,0x94,0x1B,0x53,0xAA,0x26]
strr = "b5xo1ar_gmcrirttdne8ohsoshf6t/:ewm1ea8a_2h4r/ms7cetH6nig2oss}__eyer6aot{_ea_/peot./4-2tho.fb7Bac7_rerr__/su1_n!5p8e/c.7Tlcm_saos_sdm_rpa6p3tl2recty_22ffemef_i0e03u-vl5enh9deru\\"
res = ""
for p in pos:
	res += strr[p]
print(res + "}")

# positions obtained from dump - debug rise app with a sample file and see what it does
# for each char, in their order, gets junk from /dev/urandom and uses that as a position for the character in the new shuffled string, and stores that in something similar with a linked list
# format : addr next link - 8 bytes; new position; value 00 x 6 + 00 x 8 + 0x21 + 00 x 7 - little endian
# then, it just parses the linked list and places the values at the newly calculated offset
# core - is a crash dump from the program ran on the flag, hence at rbx is our shuffled string, get it from there
# and the shuffled values, well, you kinda have to search for them given the format, you can search for 21 00 00 00 until you get something that matches the format, given that the linked list was stored 
# in the rise app at 0x55...., we can assume that the addresses from the linked list nodes will be similar, and we find such in the core dump but with 0x564e4b... 
# also - core is a crash dump, hence contains memory, hence values are in little endian
