Task 1

What is the name of the file that is likely copied from the shared folder (including the file extension)?

present_for_santa.zip - look through volatility3 windows.filescan.FileScan 

Task 2

What is the file name used to trigger the attack (including the file extension)?

click_for_present.lnk - obtained from task 3, guess

Task 3

What is the name of the file executed by click_for_present.lnk (including the file extension)?

present.vbs - use bulk_extractor and look at the lnk, it spawns a powershell running this vbs

Task 4

What is the name of the program used by the vbs script to execute the next stage?
 
powershell.exe - reconstruct the vbs partially and see what it builds, it builds some PS code and then runs it / use memprocfs with -forensic 1 and look at the vbs script, it runs powershell with some code

Task 5

What is the name of the function used for the powershell script obfuscation?

WrapPresent - use bulk_extractor to get the present_for_santa.vbs, then search the provided memory dump for crumbs from the script provided the output and try to reconstruct it, then the WrapPresent will appear in plaintext somewhere (eventually we're lead to the script building something via searching 'A4 =') / use memprocfs(had to build it manually, mount it to /mnt/<dir>) with -forensic 1 to load all the files, then we have the zip with the entire vbs code, deobfuscate it a little and see what function is used

Task 6

What is the URL that the next stage was downloaded from?

http://77.74.198.52/destroy_christmas/evil_present.jpg - did it a bit late, checked vt for name:present.vbs and looked at bhv tab :D - found out later that we can use memprocfs(had to build it manually, mount it to /mnt/<dir>) with -forensic 1 to load all the files, then we have the zip with the entire vbs code, we can run that decode function and see what it outputs => we get url

Task 7

What is the IP and port that the executable downloaded the shellcode from (IP:Port)?

77.74.198.52:445 - dump the files using volatility and load the present.exe file into ghidra, reverse the address

Task 8

What is the process ID of the remote process that the shellcode was injected into?

724 - run volatility3 with windows.malfind.Malfind and try PIDs from there / use memprocfs with -forensic 1 and look at the output of findevil - it says that there was something injected into svchost

Task 9

After the attacker established a Command & Control connection, what command did they use to clear all event logs?

Get-EventLog -List | ForEach-Object { Clear-EventLog -LogName $_.Log }  - search the powershell.evtx from windows.dumpfiles.DumpFiles in vol3

Task 10

What is the full path of the folder that was excluded from defender?

c:\users\public - search the powershell.evtx from windows.dumpfiles.DumpFiles in vol3

Task 11

What is the original name of the file that was ingressed to the victim?

procdump.exe - from the previous powershell.evtx we get that they used some process PresentForNaughtyChild.exe; look it up in memprocfs output( forensic/files; requires -forensic 1) and open it in detect it easy - in versioninfo we see that it's actually process dump from sysinternals with the original filename as procdump - add the exe extension and voila

Task 12

What is the name of the process targeted by procdump.exe?

lsass.exe - from the previous powershell.evtx we see that it used procdump on lsass.exe 



https://github.com/dbissell6/DFIR/blob/main/Blue_Book/Blue_Book.md#volatility