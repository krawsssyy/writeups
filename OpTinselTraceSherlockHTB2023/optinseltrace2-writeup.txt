What is the MD5 sum of the binary the Threat Actor found the S3 bucket location in?

62d5c1f1f9020c98f97d8085b9456b05 - hash the santa_deliveries binary from the previous challenge

Task 2

What time did the Threat Actor begin their automated retrieval of the contents of our exposed S3 bucket?

2023-11-29 08:24:07 - given task 4 and that I created a script to gather all the data from all the jsons provided, simply search for python as a user agent, iterating over first jsons yields nothing, going from the end we see python-requests, which is pretty shady, and we also see that it uses GetObject as an event, hence we try the first date when we see that

Task 3

What time did the Threat Actor complete their automated retrieval of the contents of our exposed S3 bucket?

2023-11-29 08:24:16 - get date of last exfil from previous step

Task 4

Based on the Threat Actor's user agent - what scripting language did the TA likely utilise to retrieve the files?

python - this is done second, as the hint has *****n, and that it is a scripting language, hence it is pretty easy to guess

Task 5

Which file did the Threat Actor locate some hard coded credentials within?

claus.py - from the files with extension exfiltrated at the previous 2 tasks, check everything with an extension, as the hint provided was "file.ext"

Task 6

Please detail all confirmed malicious IP addresses. (Ascending Order)

45.133.193.41, 191.101.31.57 - first ip is obtained from the python-requests exfil (191....), and second ip is obtained from vpn exfil (45...), just place them in order

Task 7

We are extremely concerned the TA managed to compromise our private S3 bucket, which contains an important VPN file. Please confirm the name of this VPN file and the time it was retrieved by the TA.

bytesparkle.ovpn, 2023-11-29 10:16:53 - search in the file with all jsons for "*.ovpn" and the event should ideally be GetObject, and we get the exfil filename and date for that

Task 8

Please confirm the username of the compromised AWS account?

elfadmin - aws account present in the santa_deliveries binary, also aws account used for exfil

Task 9

Based on the analysis completed Santa Claus has asked for some advice. What is the ARN of the S3 Bucket that requires locking down?

arn:aws:s3:::papa-noel - aws bucket present in the santa_deliveries binary, also aws account used for automated exfil




```automate.py
import os
import json
PATH1 = "C:\\Users\\alex\\Desktop\\fac\\ctfs\\diverse stuff\\HTB Christmas sherlocks dfir 2023\\optinseltrace2-pwd hacktheblue\\optinseltrace2-cloudtrail\\eu-west-2\\2023\\11\\27\\"
PATH2 = "C:\\Users\\alex\\Desktop\\fac\\ctfs\\diverse stuff\\HTB Christmas sherlocks dfir 2023\\optinseltrace2-pwd hacktheblue\\optinseltrace2-cloudtrail\\eu-west-2\\2023\\11\\28\\"
PATH3 = "C:\\Users\\alex\\Desktop\\fac\\ctfs\\diverse stuff\\HTB Christmas sherlocks dfir 2023\\optinseltrace2-pwd hacktheblue\\optinseltrace2-cloudtrail\\eu-west-2\\2023\\11\\29\\"
PATH4 = "C:\\Users\\alex\\Desktop\\fac\\ctfs\\diverse stuff\\HTB Christmas sherlocks dfir 2023\\optinseltrace2-pwd hacktheblue\\optinseltrace2-cloudtrail\\eu-west-3\\2023\\11\\27\\"
PATH5 = "C:\\Users\\alex\\Desktop\\fac\\ctfs\\diverse stuff\\HTB Christmas sherlocks dfir 2023\\optinseltrace2-pwd hacktheblue\\optinseltrace2-cloudtrail\\eu-west-3\\2023\\11\\28\\"
PATH6 = "C:\\Users\\alex\\Desktop\\fac\\ctfs\\diverse stuff\\HTB Christmas sherlocks dfir 2023\\optinseltrace2-pwd hacktheblue\\optinseltrace2-cloudtrail\\eu-west-3\\2023\\11\\29\\"
fn1 = next(os.walk(PATH1), (None, None, []))[2]
fn2 = next(os.walk(PATH2), (None, None, []))[2]
fn3 = next(os.walk(PATH3), (None, None, []))[2]
fn4 = next(os.walk(PATH4), (None, None, []))[2]
fn5 = next(os.walk(PATH5), (None, None, []))[2]
fn6 = next(os.walk(PATH6), (None, None, []))[2]
final_rec = []
for fn in fn1:
	with open(PATH1 + fn, "r") as f:
		rec = json.loads(f.read())["Records"]
		final_rec.append(rec)
for fn in fn2:
	with open(PATH2 + fn, "r") as f:
		rec = json.loads(f.read())["Records"]
		final_rec.append(rec)
for fn in fn3:
	with open(PATH3 + fn, "r") as f:
		rec = json.loads(f.read())["Records"]
		final_rec.append(rec)
for fn in fn4:
	with open(PATH4 + fn, "r") as f:
		rec = json.loads(f.read())["Records"]
		final_rec.append(rec)
for fn in fn5:
	with open(PATH5 + fn, "r") as f:
		rec = json.loads(f.read())["Records"]
		final_rec.append(rec)
for fn in fn6:
	with open(PATH6 + fn, "r") as f:
		rec = json.loads(f.read())["Records"]
		final_rec.append(rec)
with open("rec.out", "w") as g:
	for r in final_rec:
		g.write(str(r))
		g.write('\n\n')
```